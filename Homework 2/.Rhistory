colnames(x_test)[ncol(x_test)] = word
}
# Sort columns
x_train = x_train[,order(colnames(x_train))]
x_test = x_test[,order(colnames(x_test))]
file_names = rownames(x_train)
author_names = vector(mode="character",length = length(file_names))
for (i in 1:length(file_names)){
temp_name = strsplit(file_names[i],'/') # Split the file name by the /
author_names[i] = temp_name[[1]][2] # Author name is the always the 2nd element
}
# Get authors for test
test_names = rownames(x_test)
author_test = vector(mode="character",length = length(test_names))
for (i in 1:length(test_names)){
temp_name = strsplit(test_names[i],'/') # Split the file name by the /
author_test[i] = temp_name[[1]][2] # Author name is the always the 2nd element
}
x_train = data.frame(author_names,x_train)
x_test = data.frame(author_test, x_test)
colnames(x_train) = c("Author", colnames(x_train)[2:length(colnames(x_train))])
colnames(x_test) = c("Author", colnames(x_test)[2:length(colnames(x_test))])
smooth_count = 1/nrow(x_train)
#Get unique author names
authors_dedup = unique(author_names)
w_train = matrix(nrow=length(authors_dedup),ncol = length(colnames(x_train))-1)
colnames(w_train) = colnames(x_train)[2:length(colnames(x_train))]
rownames(w_train) = authors_dedup
# Create multinomial probability vector for each author
for(name in authors_dedup){
x_temp = x_train[which(x_train$Author == name),]
w_temp = colSums(x_temp[,2:length(colnames(x_train))] + smooth_count)
w_temp = w_temp/sum(w_temp)
w_train[name,] = w_temp
}
scores = matrix(nrow=nrow(x_test), ncol = length(authors_dedup))
colnames(scores) = authors_dedup
x_test_rm_author = x_test[,2:length(colnames(x_test))]
dim(w_train)
w_train[50,1]
rownames(w_train)[50]
sum(x_test_rm_author[i,]*log(w_train["WilliamKazer",])
)
x_test_rm_author[1,] %*% w_train["WilliamKazer",]
sum(x_test_rm_author[1,]*log(w_train["WilliamKazer",])
)
typeof(x_test_rm_author[1,])
typeof(w_train["WilliamKazer",])
x_test_rm_author %*% w_train
author
author = "WilliamKazer"
w_train[author,]
length(w_train[author,])
i - 1
i =1
x_test_rm_author[i,]
ncol(x_test_rm_author[i,])
rm(i)
rm(author)
for(i in 1:10){ #nrow(scores)
for(author in authors_dedup){
scores[i,author] = sum(x_test_rm_author[i,]*log(w_train[author,]))
}
}
scores
predictions = vector(mode = 'character', length = nrow(scores))
for(i in 1:10){#nrow(scores)
predictions[i] = colnames(scores)[which.max(scores[i,])]
}
correct = 0
for(i in 1:length(predictions)){
if(predictions[i] == rownames(x_test)[i]){
correct = correct +1
}
}
correct
colnames(x_test_rm_author)[1:10]
nrow(x_test_rm_author)
scores = data.frame(matrix(nrow=nrow(x_test), ncol = length(authors_dedup)))
colnames(scores) = authors_dedup
x_test_rm_author = x_test[,2:length(colnames(x_test))]
for(i in 1:nrow(scores)){
for(author in authors_dedup){
scores[i,author] = sum(x_test_rm_author[i,]*log(w_train[author,]))
}
}
i
scores i
scores[i,]
scores[1,]
check = x_test_rm_author %*% t(log(w_train))
check = x_test_rm_author * t(log(w_train))
dim(check)
check[1,]
check = sum(x_test_rm_author * t(log(w_train)))
check,1]
check[,1]
dim(check)
check
check = sum(x_test_rm_author * log(w_train))
dim(check)
check
check = x_test_rm_author * log(w_train)
dim(check)
scores[1,]
rownames(check)
colnames(check)
authors_dedup
for(i in 1:nrow(scores)){
for(author in authors_dedup){
scores[i,author] = sum(x_test_rm_author[i,]*w_train[author,])
}
}
library(e1071)
install.packages(e1071)
install.packages("e1071")
library(e1071)
colnames(x_train)
colnames(x_train)[1:2]
model1 = naiveBayes(Author ~., data = x_train)
x_test[,-1]
predict = predict(model1, x_test[,-1])
sum(predict == x_text$Author)
sum(predict == x_test$Author)
756/2500
summary(model1)
print (paste("Percent correct is",100.0*sum(predict == x_test$Author),"%"))
sum(predict == x_test$Author)
print (paste("Percent correct is",100.0*sum(predict == x_test$Author)/length(predict),"%"))
correct_names = table(predictions[which(predictions == x_test$Authors)])
top_names = correct_names[correct_names >= 5]
top_names = top_names[order(top_names, decreasing=TRUE)]
top_names
correct_names
correct_names = table(predict[which(predict == x_test$Authors)])
top_names = correct_names[correct_names >= 5]
top_names = top_names[order(top_names, decreasing=TRUE)]
correct_names = table(predict[which(predict == x_test$Author)])
top_names = correct_names[correct_names >= 5]
top_names = top_names[order(top_names, decreasing=TRUE)]
top_names
normal_settings = par()
par(mar = c(9,4,4,2))
barplot(height = top_names, ylab = "Num. Correct", main = "Correctly Predicted Authors > 10%", axes = TRUE, axisnames = TRUE, las = 2, cex.names = 0.8)
par(mar = normal_settings$mar)
# Get ordered list of most commonly predicted author
common_pred = table(predict)[order(table(predict), decreasing = TRUE)]
# Get dataframe of predictions, actuals, and frequency
matches = data.frame(predict, x_test$Author), rep(1,length(predict)))
colnames(matches) = c("predictions", "actual","freq")
# Create level ordering with most commonly predicted
matches$predictions = factor(matches$predictions, levels = names(common_pred))
# Aggregate common predictions
matches = aggregate(freq~predictions+actual,data = matches, FUN = sum)
# Sort
matches = matches[order(matches$predictions,matches$freq),]
mask = common_pred[common_pred >100]
mask2 = matches$predictions %in% names(mask)
matches = matches[mask2,]
ggplot(matches, aes(x = predictions, y = freq, fill = actual)) + geom_bar(stat = "identity")
matches = data.frame(predict, x_test$Author, rep(1,length(predict)))
colnames(matches) = c("predictions", "actual","freq")
# Create level ordering with most commonly predicted
matches$predictions = factor(matches$predictions, levels = names(common_pred))
# Aggregate common predictions
matches = aggregate(freq~predictions+actual,data = matches, FUN = sum)
# Sort
matches = matches[order(matches$predictions,matches$freq),]
mask = common_pred[common_pred >100]
mask2 = matches$predictions %in% names(mask)
matches = matches[mask2,]
ggplot(matches, aes(x = predictions, y = freq, fill = actual)) + geom_bar(stat = "identity")
str(matches)
ggplot(matches, aes(x = predictions, y = freq, group = actual)) +
geom_bar(stat = "identity", coulour = "black", fill = "#999999")
ggplot(matches, aes(x = predictions, y = freq, group = actual)) +
geom_bar(stat = "identity", colour = "black", fill = "#999999")
ggplot(matches, aes(x = predictions, y = freq, group = actual))+
geom_bar(stat = "identity", colour = "black", fill = "#999999")+
labs(top = "Most Commonly Predicted Authors", bottom = "", left = "Number of Predictions")
ggplot(matches, aes(x = predictions, y = freq, group = actual))+
geom_bar(stat = "identity", colour = "black", fill = "#999999")+
labs(title = "Most Commonly Predicted Authors", x = "", y = "Number of Predictions")
check = matches$predictions == matches$actual
check[check == TRUE] = "Match"
check[check == FALSE] = "No Match"
colnames(matches)
matches = data.frame(matches,check)
ggplot(matches, aes(x = predictions, y = freq, group = actual, fill = check))+
geom_bar(stat = "identity", colour = "black", fill = "#999999")+
labs(title = "Most Commonly Predicted Authors", x = "", y = "Number of Predictions")
ggplot(matches, aes(x = predictions, y = freq, group = actual, fill = check))+
geom_bar(stat = "identity", colour = "black", fill = "#999999")+
scale_colour_manual(values=c("#999999", "#BF5700"))+
labs(title = "Most Commonly Predicted Authors", x = "", y = "Number of Predictions")
head(matches)
ggplot(matches, aes(x = predictions, y = freq, group = actual, fill = check))+
geom_bar(stat = "identity", colour = "black")+
scale_colour_manual(values=c("#999999", "#BF5700"))+
labs(title = "Most Commonly Predicted Authors", x = "", y = "Number of Predictions")
ggplot(matches, aes(x = predictions, y = freq, group = actual, fill = check))+
geom_bar(stat = "identity", colour = "black")+
scale_colour_manual(values=c("#333F48", "#BF5700"))+
labs(title = "Most Commonly Predicted Authors", x = "", y = "Number of Predictions")
ggplot(matches, aes(x = predictions, y = freq, group = actual, fill = check))+
scale_colour_manual(values=c("#333F48", "#BF5700"))+
geom_bar(stat = "identity", colour = "black")+
labs(title = "Most Commonly Predicted Authors", x = "", y = "Number of Predictions")
ggplot(matches, aes(x = predictions, y = freq, group = actual, fill = check))+
scale_colour_manual(values=c("#333F48", "#BF5700"))+
geom_bar(stat = "identity", colour = "black", fill = "#333F48")+
labs(title = "Most Commonly Predicted Authors", x = "", y = "Number of Predictions")
ggplot(matches, aes(x = predictions, y = freq, group = actual, fill = check))+
geom_bar(stat = "identity", colour = "black", fill = "#333F48")+
scale_colour_manual(values= "#BF5700"))+
labs(title = "Most Commonly Predicted Authors", x = "", y = "Number of Predictions")
ggplot(matches, aes(x = predictions, y = freq, group = actual, fill = check))+
geom_bar(stat = "identity", colour = "black", fill = "#333F48")+
scale_colour_manual(values= "#BF5700")+
labs(title = "Most Commonly Predicted Authors", x = "", y = "Number of Predictions")
ggplot(matches, aes(x = predictions, y = freq, group = actual, fill = check))+
geom_bar(stat = "identity", colour = "black")+
scale_colour_manual(values= c("#333F48","#BF5700"))+
labs(title = "Most Commonly Predicted Authors", x = "", y = "Number of Predictions")
ggplot(matches, aes(x = predictions, y = freq, group = actual, fill = check))+
scale_colour_manual(values= c("#333F48","#BF5700"))+
geom_bar(stat = "identity", colour = "black")+
labs(title = "Most Commonly Predicted Authors", x = "", y = "Number of Predictions")
ggplot(matches, aes(x = predictions, y = freq, group = actual, fill = check))+
scale_colour_manual(values= c("#BF5700","#333F48"))+
geom_bar(stat = "identity", colour = "black")+
labs(title = "Most Commonly Predicted Authors", x = "", y = "Number of Predictions")
ggplot(matches, aes(x = predictions, y = freq, group = actual, fill = check))+
scale_fill_manual(values= c("#BF5700","#333F48"))+
geom_bar(stat = "identity", colour = "black")+
labs(title = "Most Commonly Predicted Authors", x = "", y = "Number of Predictions")
ggplot(matches, aes(x = predictions, y = freq, group = actual, fill = check))+
scale_fill_manual(values= c("#D6D2C4","#333F48"))+
geom_bar(stat = "identity", colour = "black")+
labs(title = "Most Commonly Predicted Authors", x = "", y = "Number of Predictions")
ggplot(matches, aes(x = predictions, y = freq, group = actual, fill = check))+
scale_fill_manual(values= c("#BF5700","#D6D2C4"))+
geom_bar(stat = "identity", colour = "black")+
labs(title = "Most Commonly Predicted Authors", x = "", y = "Number of Predictions")
ggplot(matches, aes(x = predictions, y = freq, group = actual, fill = check))+
scale_fill_manual(values= c("#FFFFFF","#D6D2C4"))+
geom_bar(stat = "identity", colour = "black")+
labs(title = "Most Commonly Predicted Authors", x = "", y = "Number of Predictions")
ggplot(matches, aes(x = predictions, y = freq, group = actual, fill = check))+
scale_fill_manual(values= c("#BF5700","#FFFFFF"))+
geom_bar(stat = "identity", colour = "black")+
labs(title = "Most Commonly Predicted Authors", x = "", y = "Number of Predictions")
ggplot(matches, aes(x = predictions, y = freq, group = actual, fill = check))+
scale_fill_manual(values= c("#FFFFFF","#BF5700"))+
geom_bar(stat = "identity", colour = "black")+
labs(title = "Most Commonly Predicted Authors", x = "", y = "Number of Predictions")
ggplot(matches, aes(x = predictions, y = freq, group = actual, fill = check))+
scale_fill_manual(values= c("#BF5700","#333F48"))+
geom_bar(stat = "identity", colour = "black")+
labs(title = "Most Commonly Predicted Authors", x = "", y = "Number of Predictions")
matches[1:3,]
unique(matches$predictions)
arr_plot = ggplot(aas, aes(x = reorder(UniqueCarrier, -TotalDelay), y = TotalDelay)) +
geom_bar(position = position_dodge(),stat="identity")+
scale_fill_manual(values= c("#BF5700","#333F48"))+
geom_errorbar(aes(ymin=TotalDelay-se,ymax=TotalDelay+se),
width = 0.2,
position = position_dodge(.9))+
labs(title = "Average Annual Delays by Carrier\n(Inbound to AUS)", x = "Carrier Code", y = "Average Delay in Minutes")
#outbound graph
ads = summarySE(aus_depart, measurevar = "TotalDelay", groupvars = "UniqueCarrier")
dep_plot = ggplot(ads, aes(x = reorder(UniqueCarrier, -TotalDelay), y = TotalDelay)) +
geom_bar(position = position_dodge(),stat="identity")+
scale_fill_manual(values= c("#BF5700","#333F48"))+
geom_errorbar(aes(ymin=TotalDelay-se,ymax=TotalDelay+se),
width = 0.2,
position = position_dodge(.9))+
labs(title = "Average Annual Delays by Carrier\n(Outbound from AUS)", x = "Carrier Code", y = "Average Delay in Minutes")
colnames(x_train)
colnames(x_train)[1]
library(nnet)
model2 = multinom(Author ~.,x_train)
2500*50
2500*50-18600
str(x_train)
str(w_train)
nrow(w_train)
colnames(w_train)
rownames(w_train)
w_train[1,1:5]
w_train_author = date.frame(w_train_author,x_train[,-1])
w_train_author = data.frame(w_train_author,x_train[,-1])
w_train_author = rownames(w_train)
w_train_author = data.frame(w_train_author,x_train[,-1])
w_train_author[1,1:5]
colnames(w_train_author) = c("Author",colnames(x_train)[-1])
colnames(w_train_author)
model2 = naiveBayes(Author~., data = w_train_author)
predict = predict(model2,x_test[,-1])
100.0*sum(predict == x_test$Author)/length(predict)
predict2 = predict(model2,x_test[,-1])
predict2[predict2 == x_test$Author]
length(predict2)
length(predict2[predict2 == x_test$Author])
42/2500
dim(w_train)
model2 = multinom(Author ~.,w_train_author)
?multinom
nnet(maxit = 18600)
model2 = multinom(Author ~.,w_train_author,maxit = 18600)
model2 = multinom(Author ~.,w_train_author, maxit = 18601)
?multinom
model2 = multinom(Author ~.,w_train_author, maxit = 19000)
2500*50
colnames(w_train_author)
length(colnames(w_train_author))
nrow(w_train_author)
2500*371
model2 = multinom(Author ~.,w_train_author, maxit = 927500)
model2 = multinom(Author ~.,data = w_train_author, MaxNWts = 19000)
x_test[1:5,1]
predict2 = predictMNL(model2,x_test[,-1])
predictMNL <- function(model, newdata) {
# Only works for neural network models
if (is.element("nnet",class(model))) {
# Calculate the individual and cumulative probabilities
probs <- predict(model,newdata,"probs")
cum.probs <- t(apply(probs,1,cumsum))
# Draw random values
vals <- runif(nrow(newdata))
# Join cumulative probabilities and random draws
tmp <- cbind(cum.probs,vals)
# For each row, get choice index.
k <- ncol(probs)
ids <- 1 + apply(tmp,1,function(x) length(which(x[1:k] < x[k+1])))
# Return the values
return(ids)
}
}
predict2 = predictMNL(model2,x_test[,-1])
dim(predict2)
length(predict2)
predict2[predict2 == x_test$Author]
predict2 == x_test$Author
predict2[1:5]
model2 = multinom(Author ~.,data = w_train_author, MaxNWts = 19000, maxit = 10)
predict2 = predict(model2, type="probs", newdata=x_test[,-1])
predict2[1:5]
length(predict2)
predict2
colnames(predict2)
nrow(predict2)
predict2[1,]
which.max(predict2[1,])
predict2[1,1:5]
which.max(predict2[1:5,])
predict_authors = data.frame(rep("",nrow(predict2))
)
for(i in 1:nrow(predict2)){
predict_authors[i] = which.max(predict2[i,])
}
head(predict_authors)
dim(model2)
nrow(predict_authors)
dim(predict_authors)
predict_authors = vector(mode="character",length = nrow(predict2))
for(i in 1:nrow(predict2)){
predict_authors[i] = which.max(predict2[i,])
}
head(predict_authors)
dim(predict_authors)
nrow(predict_authors)
which.max(predict2[1,])
colnames(predict2)
predict_authors = vector(mode="character",length = nrow(predict2))
for(i in 1:nrow(predict2)){
predict_authors[i] = colnames(predict2)[which.max(predict2[i,])]
}
head(predict_authors)
predict_authors == x_test$Author
sum(predict_authors == x_test$Author)
54/2500
1/50
predict_authors[predict_authors == x_test$Author]
rownames(w_train)
w_train_author[2490:2500,1:5]
colnames(w_train)
w_train_author = rownames(w_train)
w_train_author = data.frame(w_train_author,w_train[,-1])
colnames(w_train_author) = c("Author",colnames(w_train)[-1])
model2 = multinom(Author ~.,data = w_train_author, MaxNWts = 19000, maxit = 10)
predict2 = predict(model2, type="probs", newdata=x_test[,-1])
predict_authors = vector(mode="character",length = nrow(predict2))
for(i in 1:nrow(predict2)){
predict_authors[i] = colnames(predict2)[which.max(predict2[i,])]
}
sum(predict_authors == x_test$Author)
sum(predict_authors == x_test$Author)/nrow(predict_authors)
100.0*sum(predict_authors == x_test$Author)/nrow(predict_authors)
100.0*sum(predict_authors == x_test$Author)/length(predict_authors)
correct_names = table(predict2[which(predict2 == x_test$Author)])
correct_names
correct_names = table(predict_authors[which(predict_authors == x_test$Author)])
correct_names
top_names = correct_names[correct_names >= 5]
top_names = top_names[order(top_names, decreasing=TRUE)]
top_names
normal_settings = par()
par(mar = c(9,4,4,2))
barplot(height = top_names, ylab = "Num. Correct", main = "Correctly Predicted Authors > 10%", axes = TRUE, axisnames = TRUE, las = 2, cex.names = 0.8)
par(mar = normal_settings$mar)
common_pred = table(predict_authors)[order(table(predict_authors), decreasing = TRUE)]
matches = data.frame(predict_authors, x_test$Author, rep(1,length(predict_authors)))
colnames(matches) = c("predictions", "actual","freq")
matches$predictions = factor(matches$predictions, levels = names(common_pred))
predict_authors
common_pred2
common_pred2 = table(predict_authors)[order(table(predict_authors), decreasing = TRUE)]
common_pred2
names(common_pred2)
levels(predict_authors)
summary(predict_authors)
str(predict_authors)
predict_authors
typeof(predict_authors)
factors(predict_authors)
factor(predict_authors)
names(common_pred2)
levels(matches2$predictions) = names(authors_dedup)
matches2 = data.frame(predict_authors, x_test$Author, rep(1,length(predict_authors)))
colnames(matches2) = c("predictions", "actual","freq")
levels(matches2$predictions) = names(authors_dedup)
authors_dedupe
authors_dedup
levels(matches2$predictions) = authors_dedup
factor(predict_authors)
levels(predict_authors) = authors_dedup
factor(predict_authors)
factor(authors_dedup)
factor(predict_authors)
levels(predict_authors)
common_pred2
factor(common_pred2)
factor(names(common_pred2))
common_pred2 = table(predict_authors)[order(table(predict_authors), decreasing = TRUE)]
common_pred2
levels(predict_authors) = authors_dedup
levels(common_pred2) = authors_dedup
dim(predict)
length(predict)
factor(predict)
factor(predict_authors)
table(predict_authors)
order(table(predict_authors), decreasing = TRUE)
names(common_pred2)
missing_authors = which(!(authors_dedup %in% names(_test)common_pred2))
missing_authors = which(!(authors_dedup %in% names(common_pred2)))
missing_authors
missing_authors = authors_dedup(which(!(authors_dedup %in% names(common_pred2))))
missing_authors = authors_dedup[which(!(authors_dedup %in% names(common_pred2)))]
missing_authors
length(common_pred2)
dim(common_pred2)
common_pred2[1:5,]
common_pred2[1:5]
rownames(common_pred2)
for(n in missing_authors){
common_pred2[n] = 0
}
rownames(common_pred2)
common_pred2
missing_authors
levels(predict_authors) = factor(common_pred2)
predict_authors = vector(mode="character",length = nrow(predict2))
for(i in 1:nrow(predict2)){
predict_authors[i] = colnames(predict2)[which.max(predict2[i,])]
}
factor(common_pred2)
levels(missing_authors)
factor(missing_authors)
factor(common_pred2)
factor(names(common_pred2))
common_pred2 = table(predict_authors)[order(table(predict_authors), decreasing = TRUE)]
missing_authors = authors_dedup[which(!(authors_dedup %in% names(common_pred2)))]
for(n in missing_authors){
common_pred2[n] = 0
}
missing_authors = authors_dedup[which(!(authors_dedup %in% names(common_pred2)))]
matches2 = data.frame(predict_authors, x_test$Author, rep(1,length(predict_authors)))
colnames(matches2) = c("predictions", "actual","freq")
matches2$predictions = factor(matches2$predictions, levels = names(common_pred2))
matches2 = aggregate(freq~predictions+actual,data = matches2, FUN = sum)
levels(predict_authors)
levels(names(predict_authors))
predict_authors
factor(predict_authors)
levels(matches2$predictions) = names(common_pred2)
matches2$predictions = factor(matches2$predictions, levels = names(common_pred2))
matches2 = aggregate(freq~predictions+actual,data = matches2, FUN = sum)
matches2 = matches2[order(matches2$predictions,matches2$freq),]
mask3 = common_pred2[common_pred2 >100]
mask4 = matches2$predictions %in% names(mask3)
matches2 = matches2[mask4,]
check2 = matches2$predictions == matches2$actual
check2[check2 == TRUE] = "Match"
check2[check2 == FALSE] = "No Match"
matches2 = data.frame(matches2,check2)
ggplot(matches2, aes(x = predictions, y = freq, group = actual, fill = check))+
scale_fill_manual(values= c("#BF5700","#333F48"))+
geom_bar(stat = "identity", colour = "black")+
labs(title = "Most Commonly Predicted Authors", x = "", y = "Number of Predictions")
factor(matches2)
